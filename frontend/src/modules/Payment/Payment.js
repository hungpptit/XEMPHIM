import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import authService from '../../services/authService';
import { 
  FaArrowLeft, 
  FaCreditCard, 
  FaMobile, 
  FaUniversity,
  FaCheckCircle,
  FaSpinner,
  FaClock,
  FaMapMarkerAlt,
  FaCalendar,
  FaUsers
} from 'react-icons/fa';
import styles from './Payment.module.css';

const Payment = () => {
  const location = useLocation();
  const navigate = useNavigate();
  
  const [selectedMethod, setSelectedMethod] = useState('momo');
  const [customerInfo, setCustomerInfo] = useState({
    fullName: '',
    email: '',
    phone: '',
    agreeTerms: false
  });
  const [isUser, setIsUser] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);

  const { movie, showtime, selectedSeats, totalPrice, bookingId } = location.state || {};

  const paymentMethods = [
    {
      id: 'momo',
      name: 'V√≠ MoMo',
      desc: 'Thanh to√°n nhanh ch√≥ng v·ªõi v√≠ ƒëi·ªán t·ª≠ MoMo',
      icon: 'üì±',
      color: '#d82d8b'
    },
    {
      id: 'vnpay',
      name: 'VNPay',
      desc: 'Thanh to√°n qua c·ªïng VNPay an to√†n',
      icon: 'üí≥',
      color: '#1e88e5'
    },
    {
      id: 'visa',
      name: 'Visa/Mastercard',
      desc: 'Thanh to√°n b·∫±ng th·∫ª t√≠n d·ª•ng qu·ªëc t·∫ø',
      icon: 'üí≥',
      color: '#1565c0'
    },
    {
      id: 'bank',
      name: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
      desc: 'Chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp qua ng√¢n h√†ng',
      icon: 'üè¶',
      color: '#388e3c'
    }
  ];

  React.useEffect(() => {
    if (!movie || !showtime || !selectedSeats || selectedSeats.length === 0 || !bookingId) {
      console.warn('Missing payment data:', { movie, showtime, selectedSeats, bookingId });
      navigate('/');
    }
  }, [movie, showtime, selectedSeats, bookingId, navigate]);

  // If user is logged in (cookie based), prefill customer info so they don't need to type
  React.useEffect(() => {
    let mounted = true;
    const loadCurrentUser = async () => {
      try {
        const u = await authService.getCurrentUser();
        if (!mounted) return;
        if (u) {
          setCustomerInfo(prev => ({
            ...prev,
            fullName: u.full_name || u.fullName || u.name || prev.fullName || '',
            email: u.email || prev.email || '',
            phone: u.phone || u.phone_number || u.mobile || prev.phone || ''
          }));
          setIsUser(true);
        }
      } catch (e) {
        // ignore
      }
    };
    loadCurrentUser();
    return () => { mounted = false; };
  }, []);

  const handleInputChange = (field, value) => {
    setCustomerInfo(prev => ({ ...prev, [field]: value }));
  };

  const validateForm = () => {
    const { fullName, email, phone, agreeTerms } = customerInfo;
    
    if (!fullName.trim()) {
      alert('Vui l√≤ng nh·∫≠p h·ªç t√™n');
      return false;
    }
    if (!email.trim() || !email.includes('@')) {
      alert('Vui l√≤ng nh·∫≠p email h·ª£p l·ªá');
      return false;
    }
    if (!phone.trim() || phone.length < 10) {
      alert('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá');
      return false;
    }
    if (!agreeTerms) {
      alert('Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng');
      return false;
    }
    
    return true;
  };

  const handlePayment = async () => {
    if (!validateForm()) return;
    if (!bookingId) {
      alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin booking. Vui l√≤ng th·ª≠ l·∫°i.');
      return;
    }

    setProcessing(true);
    
    try {
      // Call backend to confirm payment
      const { bookingAPI } = await import('../../services/api');
      console.log('Confirming payment for booking:', bookingId);
      
      const result = await bookingAPI.confirmPayment(bookingId, {
        payment_method: selectedMethod,
        payment_payload: {
          transaction_ref: `TXN_${Date.now()}`,
          response_code: '00' // success code
        }
      });
      
      console.log('Payment confirmation result:', result);

      // Handle response format (API might return {data: ...} or direct object)
      const responseData = result.data || result;
      console.log('Response data:', responseData);

      if (responseData && responseData.booking) {
        setProcessing(false);
        setShowSuccessModal(true);
        
        // Save booking info to localStorage for MyTickets
        const bookingData = {
          id: responseData.booking.id.toString(),
          movie,
          showtime,
          selectedSeats,
          totalPrice,
          customerInfo,
          paymentMethod: selectedMethod,
          bookingDate: new Date().toISOString(),
          status: 'confirmed'
        };
        
        const existingBookings = JSON.parse(localStorage.getItem('bookings') || '[]');
        existingBookings.push(bookingData);
        localStorage.setItem('bookings', JSON.stringify(existingBookings));
      } else {
        throw new Error('Payment confirmation failed');
      }
    } catch (error) {
      console.error('Payment error:', error);
      setProcessing(false);
      alert('Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleSuccessClose = () => {
    setShowSuccessModal(false);
    navigate('/my-tickets');
  };

  if (!movie || !showtime || !selectedSeats || selectedSeats.length === 0 || !bookingId) {
    return (
      <div className={styles.payment}>
        <div className="container">
          <div className={styles.loadingContainer}>
            <h2>Th√¥ng tin kh√¥ng h·ª£p l·ªá</h2>
            <button onClick={() => navigate('/')} className="btn">
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.payment}>
      <button 
        className={styles.backBtn}
        onClick={() => navigate(-1)}
      >
        <FaArrowLeft />
      </button>

      <div className={styles.header}>
        <h1 className={styles.title}>Thanh to√°n</h1>
        <p className={styles.subtitle}>Ho√†n t·∫•t ƒë·∫∑t v√© c·ªßa b·∫°n</p>
      </div>

      <div className={styles.content}>
        <div className={styles.paymentForm}>
          {/* Payment Methods */}
          <div className={styles.sectionTitle}>
            <FaCreditCard />
            Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
          </div>
          
          <div className={styles.paymentMethods}>
            {paymentMethods.map(method => (
              <label 
                key={method.id}
                className={`${styles.methodOption} ${selectedMethod === method.id ? styles.selected : ''}`}
              >
                <input
                  type="radio"
                  name="paymentMethod"
                  value={method.id}
                  checked={selectedMethod === method.id}
                  onChange={(e) => setSelectedMethod(e.target.value)}
                  className={styles.methodRadio}
                />
                <div className={styles.methodIcon} style={{ backgroundColor: method.color }}>
                  {method.icon}
                </div>
                <div className={styles.methodInfo}>
                  <div className={styles.methodName}>{method.name}</div>
                  <div className={styles.methodDesc}>{method.desc}</div>
                </div>
              </label>
            ))}
          </div>

          {/* Customer Information */}
          <div className={styles.customerInfo}>
            <div className={styles.sectionTitle}>
              <FaUsers />
              Th√¥ng tin kh√°ch h√†ng
            </div>
            
            <div className={styles.formGrid}>
              <div className={styles.formGroup}>
                <label className={styles.label}>H·ªç v√† t√™n *</label>
                <input
                  type="text"
                  className={styles.input}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  value={customerInfo.fullName}
                  onChange={(e) => handleInputChange('fullName', e.target.value)}
                  readOnly={isUser}
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.label}>S·ªë ƒëi·ªán tho·∫°i *</label>
                <input
                  type="tel"
                  className={styles.input}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  value={customerInfo.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  readOnly={isUser}
                />
              </div>
            </div>
            
            <div className={`${styles.formGroup} ${styles.full}`}>
              <label className={styles.label}>Email *</label>
              <input
                type="email"
                className={styles.input}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                value={customerInfo.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                readOnly={isUser}
              />
            </div>

            <div className={styles.checkbox}>
              <input
                type="checkbox"
                id="agreeTerms"
                className={styles.checkboxInput}
                checked={customerInfo.agreeTerms}
                onChange={(e) => handleInputChange('agreeTerms', e.target.checked)}
              />
              <label htmlFor="agreeTerms">
                T√¥i ƒë·ªìng √Ω v·ªõi <a href="#" style={{ color: 'var(--color-gold)' }}>ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a> v√† 
                <a href="#" style={{ color: 'var(--color-gold)' }}> Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
              </label>
            </div>
          </div>

          <button 
            className={styles.payBtn}
            onClick={handlePayment}
            disabled={processing}
          >
            {processing ? (
              <>
                <FaSpinner className="loading" />
                ƒêang x·ª≠ l√Ω...
              </>
            ) : (
              <>
                <FaCreditCard />
                Thanh to√°n {totalPrice?.toLocaleString()}ƒë
              </>
            )}
          </button>
        </div>

        {/* Booking Summary */}
        <div className={styles.summary}>
          <h2 className={styles.summaryTitle}>Th√¥ng tin ƒë·∫∑t v√©</h2>
          
          <div className={styles.movieInfo}>
            <img 
              src={movie?.poster} 
              alt={movie?.title}
              className={styles.moviePoster}
            />
            <div className={styles.movieTitle}>{movie?.title}</div>
          </div>

          <div className={styles.showDetails}>
            <div className={styles.detailRow}>
              <span className={styles.detailLabel}>
                <FaCalendar style={{ marginRight: '5px' }} />
                Ng√†y:
              </span>
              <span className={styles.detailValue}>{showtime?.date}</span>
            </div>
            <div className={styles.detailRow}>
              <span className={styles.detailLabel}>
                <FaClock style={{ marginRight: '5px' }} />
                Gi·ªù:
              </span>
              <span className={styles.detailValue}>{showtime?.time}</span>
            </div>
            <div className={styles.detailRow}>
              <span className={styles.detailLabel}>
                <FaMapMarkerAlt style={{ marginRight: '5px' }} />
                R·∫°p:
              </span>
              <span className={styles.detailValue}>{showtime?.cinema}</span>
            </div>
          </div>

          <div className={styles.seatsInfo}>
            <div className={styles.detailRow}>
              <span className={styles.detailLabel}>Gh·∫ø ƒë√£ ch·ªçn:</span>
              <span className={styles.detailValue}>{selectedSeats?.length} gh·∫ø</span>
            </div>
            <div className={styles.seatsList}>
              {selectedSeats?.map(seat => (
                <span key={seat.id} className={styles.seatItem}>
                  {seat.displayName || seat.id}
                </span>
              ))}
            </div>
          </div>

          <div className={styles.pricing}>
            {selectedSeats?.reduce((acc, seat) => {
              const type = seat.type === 'vip' ? 'VIP' : 'Th∆∞·ªùng';
              const existing = acc.find(item => item.type === type);
              if (existing) {
                existing.count++;
                existing.total += seat.price;
              } else {
                acc.push({
                  type,
                  count: 1,
                  price: seat.price,
                  total: seat.price
                });
              }
              return acc;
            }, []).map((item, index) => (
              <div key={index} className={styles.priceRow}>
                <span className={styles.detailLabel}>
                  Gh·∫ø {item.type} x{item.count}:
                </span>
                <span className={styles.detailValue}>
                  {item.total.toLocaleString()}ƒë
                </span>
              </div>
            ))}
            <div className={`${styles.priceRow} ${styles.total}`}>
              <span>T·ªïng c·ªông:</span>
              <span>{totalPrice?.toLocaleString()}ƒë</span>
            </div>
          </div>
        </div>
      </div>

      {/* Success Modal */}
      {showSuccessModal && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <FaCheckCircle className={styles.modalIcon} />
            <h2 className={styles.modalTitle}>ƒê·∫∑t v√© th√†nh c√¥ng!</h2>
            <p className={styles.modalMessage}>
              C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t v√© t·∫°i CinemaX. Th√¥ng tin v√© ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.
              Vui l√≤ng ƒë·∫øn r·∫°p tr∆∞·ªõc gi·ªù chi·∫øu 15 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c.
            </p>
            <div className={styles.modalActions}>
              <button 
                className={`${styles.modalBtn} ${styles.modalBtnPrimary}`}
                onClick={handleSuccessClose}
              >
                Xem v√© c·ªßa t√¥i
              </button>
              <button 
                className={`${styles.modalBtn} ${styles.modalBtnSecondary}`}
                onClick={() => navigate('/')}
              >
                V·ªÅ trang ch·ªß
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Payment;